name: Publish telegram announcements about new releases

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      send_to_user:
        description: 'Send message to user instead of group?'
        required: true
        default: false
        type: boolean

jobs:
  notify:
    name: Notify Telegram
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq curl

      - name: Determine recipient and check secrets
        id: check
        run: |
          if [ -z "${{ secrets.TELEGRAM_TOKEN }}" ]; then
            echo "Telegram token is not set. Skipping." && exit 0
          fi

          TO=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.send_to_user }}" == "true" ]]; then
            TO="${{ secrets.TELEGRAM_TO_USER }}"
          else
            TO="${{ secrets.TELEGRAM_TO_GROUP }}"
          fi

          if [ -z "$TO" ]; then
            echo "Target Telegram ID is not set. Skipping." && exit 0
          fi

          echo "to=$TO" >> $GITHUB_OUTPUT

      - name: Determine release link and message content
        id: prepare
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${GITHUB_REPOSITORY##*/}"

          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            URL="${{ github.event.release.html_url }}"
          else
            # Try to get the latest release using gh CLI
            URL=$(gh release view --repo "$GITHUB_REPOSITORY" --json url -q .url 2>/dev/null || echo "")
            if [ -z "$URL" ]; then
              # Fallback to main branch
              VERSION="$(gh repo view --json defaultBranchRef -q .defaultBranchRef.name)"
              BRANCH_URL="https://github.com/${GITHUB_REPOSITORY}/tree/$VERSION"
              URL="$BRANCH_URL"
            else
              VERSION=$(gh release view "$VERSION" --repo "$GITHUB_REPOSITORY" --json tagName -q .tagName)
            fi
          fi

          {
            echo "message<<EOF"
            echo "✅ Новый релиз **$VERSION** проекта **$REPO** опубликован!"
            echo
            echo "Ссылка на GitHub: $URL"
            [[ "$REPO" == hass-* ]] && {
              HACS="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/$VERSION/hacs.json"
              HAMIN=$(curl -s "$url" | jq -r '.homeassistant // empty')
              [ -n "$HAMIN" ] && echo "Совместимость: HA ≥$HAMIN"
            }
            echo
            echo "#$REPO" | awk -F'-' '{for (i=1; i<=NF; i++) printf i==1 ? tolower($i) : toupper(substr($i,1,1)) tolower(substr($i,2)); print ""}'
            [[ "$REPO" == hass-* ]] && echo "#homeassistant"
            [[ "$REPO" == python-* ]] && echo "#python"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Send Telegram message
        if: steps.check.outputs.to != ''
        uses: appleboy/telegram-action@master
        with:
          to: ${{ steps.check.outputs.to }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ steps.prepare.outputs.message }}
          format: markdown
